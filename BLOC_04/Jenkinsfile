pipeline {
    agent {
        docker {
            image 'python:3.10-slim'
            args '-u root:root'
        }
    }
    
    environment {
        WORK_DIR = "BLOC_04"
        REPORT_DIR = "${WORK_DIR}/reports"
        UNIT_REPORT = "${REPORT_DIR}/unit"
        ML_REPORT = "${REPORT_DIR}/ml"
        INTEGRATION_REPORT = "${REPORT_DIR}/integration"
    }
    
    stages {
        stage('Install dependencies') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        apt-get update && apt-get install -y --no-install-recommends gcc
                        pip install --upgrade pip
                        pip install -r requirements.txt
                    '''
                }
            }
        }
        
        stage('Lint Code') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        echo "üîç V√©rification qualit√© du code..."
                        flake8 dags/ dags_ml/ --max-line-length=120 --extend-ignore=E501,W503 --count || true
                        pylint dags/*.py dags_ml/*.py --disable=C,R --exit-zero || true
                    '''
                }
            }
        }
        
        stage('Validate DAGs') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        echo "‚úÖ Validation syntaxe des DAGs..."
                        export PYTHONPATH=$PYTHONPATH:$WORKSPACE/${WORK_DIR}/plugins
                        python tests/ml/validate_dags.py || exit 1
                    '''
                }
            }
        }
        
        stage('Run unit tests - Data Pipeline') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        echo "üß™ Tests unitaires - Pipeline de donn√©es..."
                        export PYTHONPATH=$PYTHONPATH:$WORKSPACE/${WORK_DIR}/plugins
                        mkdir -p reports/unit
                        pytest tests/unit \
                            --junitxml=reports/unit/report.xml \
                            --html=reports/unit/report.html \
                            --self-contained-html \
                            -v
                    '''
                }
            }
        }
        
        stage('Run unit tests - ML Pipeline') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        echo "üß™ Tests unitaires - Pipeline ML..."
                        export PYTHONPATH=$PYTHONPATH:$WORKSPACE/${WORK_DIR}/plugins:$WORKSPACE/${WORK_DIR}/dags_ml
                        mkdir -p reports/ml
                        pytest tests/ml/test_weather_dags.py tests/ml/test_training_pipeline.py \
                            -m "not integration" \
                            --junitxml=reports/ml/report.xml \
                            --html=reports/ml/report.html \
                            --self-contained-html \
                            --cov=dags_ml \
                            --cov-report=xml:reports/ml/coverage.xml \
                            --cov-report=html:reports/ml/coverage_html \
                            -v
                    '''
                }
            }
        }
        
        stage('Run integration tests - ML') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        echo "üîó Tests d'int√©gration - ML..."
                        export PYTHONPATH=$PYTHONPATH:$WORKSPACE/${WORK_DIR}/plugins:$WORKSPACE/${WORK_DIR}/dags_ml
                        mkdir -p reports/integration
                        pytest tests/ml \
                            -m "integration" \
                            --junitxml=reports/integration/report.xml \
                            --html=reports/integration/report.html \
                            --self-contained-html \
                            -v || true
                    '''
                }
            }
        }
        
        stage('Generate Coverage Summary') {
            steps {
                dir("${WORK_DIR}") {
                    sh '''
                        echo "üìä G√©n√©ration du rapport de couverture global..."
                        if [ -f reports/ml/coverage.xml ]; then
                            echo "‚úÖ Couverture ML g√©n√©r√©e"
                        fi
                    '''
                }
            }
        }
        
        stage('Publish reports') {
            steps {
                // Rapports JUnit
                junit allowEmptyResults: true, testResults: "${REPORT_DIR}/**/report.xml"
                
                // Rapports HTML - Tests unitaires (data pipeline)
                publishHTML(target: [
                    reportDir: "${UNIT_REPORT}",
                    reportFiles: "report.html",
                    reportName: "Unit Tests - Data Pipeline",
                    keepAll: true,
                    alwaysLinkToLastBuild: true
                ])
                
                // Rapports HTML - Tests unitaires ML
                publishHTML(target: [
                    reportDir: "${ML_REPORT}",
                    reportFiles: "report.html",
                    reportName: "Unit Tests - ML Pipeline",
                    keepAll: true,
                    alwaysLinkToLastBuild: true
                ])
                
                // Rapport de couverture ML
                publishHTML(target: [
                    reportDir: "${ML_REPORT}/coverage_html",
                    reportFiles: "index.html",
                    reportName: "Coverage Report - ML",
                    keepAll: true,
                    alwaysLinkToLastBuild: true
                ])
                
                // Rapports HTML - Tests d'int√©gration
                publishHTML(target: [
                    reportDir: "${INTEGRATION_REPORT}",
                    reportFiles: "report.html",
                    reportName: "Integration Tests - ML",
                    keepAll: true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
            }
        }
    }
    
    post {
        success {
            echo "‚úÖ All tests passed!"
            script {
                // Compter les tests
                def unitTests = 0
                def mlTests = 0
                def integrationTests = 0
                
                try {
                    def unitXml = readFile("${REPORT_DIR}/unit/report.xml")
                    unitTests = (unitXml =~ /tests="(\d+)"/).findAll().size()
                } catch (Exception e) {}
                
                try {
                    def mlXml = readFile("${REPORT_DIR}/ml/report.xml")
                    mlTests = (mlXml =~ /tests="(\d+)"/).findAll().size()
                } catch (Exception e) {}
                
                emailext(
                    subject: "‚úÖ Tests r√©ussis - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                        <html>
                        <body>
                            <h2>‚úÖ Tests r√©ussis</h2>
                            <p><b>Projet</b> : ${env.JOB_NAME}</p>
                            <p><b>Build</b> : #${env.BUILD_NUMBER}</p>
                            
                            <h3>üìä R√©sum√© des tests</h3>
                            <ul>
                                <li>Tests unitaires - Data Pipeline : ${unitTests} tests</li>
                                <li>Tests unitaires - ML Pipeline : ${mlTests} tests</li>
                                <li>Tests d'int√©gration : ${integrationTests} tests</li>
                            </ul>
                            
                            <h3>üìÑ Rapports</h3>
                            <ul>
                                <li><a href="${env.BUILD_URL}Unit_20Tests_20-_20Data_20Pipeline/">Tests Data Pipeline</a></li>
                                <li><a href="${env.BUILD_URL}Unit_20Tests_20-_20ML_20Pipeline/">Tests ML Pipeline</a></li>
                                <li><a href="${env.BUILD_URL}Coverage_20Report_20-_20ML/">Couverture ML</a></li>
                                <li><a href="${env.BUILD_URL}Integration_20Tests_20-_20ML/">Tests Int√©gration</a></li>
                            </ul>
                            
                            <p><i>Tous les tests ont √©t√© ex√©cut√©s avec succ√®s ! üéâ</i></p>
                            
                            <p>Cordialement,<br/>Jenkins CI</p>
                        </body>
                        </html>
                    """,
                    to: 'enguyen.fr@gmail.com',
                    from: 'enguyen.fr@gmail.com',
                    replyTo: 'enguyen.fr@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            echo "‚ùå Some tests failed."
            script {
                emailext(
                    subject: "‚ùå √âchec des tests - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                        <html>
                        <body>
                            <h2>‚ùå √âchec des tests</h2>
                            <p><b>Projet</b> : ${env.JOB_NAME}</p>
                            <p><b>Build</b> : #${env.BUILD_NUMBER}</p>
                            
                            <h3>‚ö†Ô∏è Action requise</h3>
                            <p>Un ou plusieurs tests ont √©chou√©. Merci de consulter les rapports ci-dessous :</p>
                            
                            <h3>üìÑ Rapports</h3>
                            <ul>
                                <li><a href="${env.BUILD_URL}Unit_20Tests_20-_20Data_20Pipeline/">Tests Data Pipeline</a></li>
                                <li><a href="${env.BUILD_URL}Unit_20Tests_20-_20ML_20Pipeline/">Tests ML Pipeline</a></li>
                                <li><a href="${env.BUILD_URL}Integration_20Tests_20-_20ML/">Tests Int√©gration</a></li>
                                <li><a href="${env.BUILD_URL}console">Console Output</a></li>
                            </ul>
                            
                            <p><b>Merci de corriger les erreurs d√®s que possible.</b></p>
                            
                            <p>Cordialement,<br/>Jenkins CI</p>
                        </body>
                        </html>
                    """,
                    to: 'enguyen.fr@gmail.com',
                    from: 'enguyen.fr@gmail.com',
                    replyTo: 'enguyen.fr@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
        
        always {
            echo "üßπ Nettoyage..."
            cleanWs()
        }
    }
}
